
# -----------------------------
# REQUIRED ENV VARS:
#   - LDAP_ADMIN_PASSWORD
#   - POSTGRES_PASSWORD
# -----------------------------

services:  
  pigeon-openldap-server:
    container_name: pigeon-openldap-server
    image: bitnami/openldap:2.5.18
    restart: always
    networks:
      - build-network
    environment:
      LDAP_PORT_NUMBER: 389
      LDAP_ROOT: dc=cp-sys,dc=hu
      LDAP_ADMIN_USERNAME: admin
      LDAP_ADMIN_DN: cn=admin,dc=cp-sys,dc=hu
      LDAP_ADMIN_PASSWORD: ${LDAP_ADMIN_PASSWORD}
      LDAP_SKIP_DEFAULT_TREE: yes
    volumes:
      - openldap_data:/bitnami/openldap

  pigeon-openldap-admin:
    container_name: pigeon-openldap-admin
    image: dnknth/ldap-ui
    pull_policy: always
    restart: unless-stopped
    networks:
      - build-network
    environment:
      LDAP_URL: ldap://pigeon-openldap-server:389
      BASE_DN: dc=cp-sys,dc=hu
      BIND_PATTERN: "%s"
    ports:
      - "6443:5000"

  pigeon-portainer:
    container_name: pigeon-portainer
    image: portainer/portainer-ce:2.21.3
    restart: always
    networks:
      - build-network
    volumes:
      - portainer_data:/data
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "2000:8000"
      - "2001:9000"

  pigeon-jenkins-controller:
    container_name: pigeon-jenkins-controller
    image: pigeon-jenkins-controller:2.462.3-lts-jdk21
    build: ./pigeon-jenkins
    restart: always
    networks:
      - build-network
    environment:
      JENKINS_OPTS: --prefix=/jenkins
    volumes:
      - jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "2999:8080"
      - "50000:50000"

  pigeon-nexus:
    container_name: pigeon-nexus
    image: sonatype/nexus3:3.73.0
    restart: always
    networks:
      - build-network
    environment:
      NEXUS_CONTEXT: nexus/
    volumes:
      - nexus_data:/nexus-data
    ports:
      - "2002:8081"
      - "1900:1900"
      - "1901:1901"
      - "1902:1902"

  pigeon-nginx:
    container_name: pigeon-nginx
    image: pigeon-nginx:1.26.2
    build: ./pigeon-nginx
    restart: always
    networks:
      - build-network
    volumes:
      - /letsencryptdata/etc/letsencrypt:/etc/letsencrypt
      - /letsencryptdata/www:/var/www/certbot
    ports:
      - "80:80"
      - "443:443"

  pigeon-postgres:
    container_name: pigeon-postgres
    image: postgres:15.8
    restart: always
    networks:
      - build-network
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_home:/var/lib/postgresql
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  pigeon-sonarqube:
    container_name: pigeon-sonarqube
    image: sonarqube:10.7.0-community
    restart: always
    command: -Dsonar.web.context=/sonar
    networks:
      - build-network
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://pigeon-postgres:5432/sonar
      SONAR_JDBC_USERNAME: postgres
      SONAR_JDBC_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_conf:/opt/sonarqube/conf
    ports:
      - "2010:9000"

volumes:
  openldap_data:
    name: openldap_data
  portainer_data:
    name: portainer_data
  jenkins_home:
    name: jenkins_home
  nexus_data:
    name: nexus_data
  postgres_home:
    name: postgres_home
  postgres_data:
    name: postgres_data
  sonarqube_data:
    name: sonarqube_data
  sonarqube_extensions:
    name: sonarqube_extensions
  sonarqube_logs:
    name: sonarqube_logs
  sonarqube_conf:
    name: sonarqube_conf

networks:
  build-network:
    name: build-network
    driver: bridge
